{"version":3,"sources":["App.tsx","web-build/register-service-worker.js","node_modules/@neurosity/notion/dist/browser sync"],"names":["App","useState","notion","setNotion","user","setUser","loading","setLoading","deviceId","setDeviceId","email","setEmail","password","setPassword","focus","setFocus","bgColor","setBgColor","intervalId","setIntervalId","notifications","setNotifications","useEffect","subscription","subscribe","Number","probability","toFixed","unsubscribe","a","async","AsyncStorage","getItem","id","Platform","OS","notificationInit","Notion","initDemo","setInterval","Math","random","onAuthStateChanged","login","catch","error","console","log","auth","Vibration","vibrate","Notification","cancel","window","permission","requestPermission","then","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","heading","fontSize","marginBottom","input","height","width","maxWidth","borderColor","borderWidth","marginVertical","paddingHorizontal","focusText","style","title","onPress","logout","clearInterval","onChangeText","text","value","placeholder","textContentType","autoCompleteType","secureTextEntry","setItem","thisNotion","init","accessibilityLabel","navigator","addEventListener","serviceWorker","register","scope","info","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/app.f75dbfa4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TextInput,\n  Button,\n  AsyncStorage,\n  Vibration,\n  Platform,\n} from 'react-native'\nimport { Notion } from '@neurosity/notion'\n\nexport default function App() {\n  const [notion, setNotion] = useState(null)\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [deviceId, setDeviceId] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [focus, setFocus] = useState(0)\n  const [bgColor, setBgColor] = useState<'#fff' | 'red'>('#fff')\n  const [intervalId, setIntervalId] = useState(null)\n  const [notifications, setNotifications] = useState(false)\n\n  useEffect(() => {\n    if (!user || !notion) {\n      return\n    }\n\n    const subscription = notion.focus().subscribe((focus) => {\n      setFocus(Number(focus.probability.toFixed(2)))\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [user, notion])\n\n  useEffect(() => {\n    ;(async () => {\n      const id = await AsyncStorage.getItem('deviceId')\n      if (id) {\n        setDeviceId(id)\n      }\n    })()\n    if (Platform.OS === 'web') {\n      notificationInit()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (deviceId) {\n      const notion = new Notion({ deviceId })\n      setNotion(notion)\n    } else {\n      setLoading(false)\n    }\n  }, [deviceId])\n\n  const init = () => {\n    if (deviceId === 'test') {\n      initDemo()\n    }\n    AsyncStorage.setItem('deviceId', deviceId)\n    const thisNotion = new Notion({ deviceId })\n    setNotion(thisNotion)\n  }\n\n  const initDemo = () => {\n    setUser(true)\n    setIntervalId(\n      setInterval(() => {\n        setFocus(Math.random())\n      }, 1000)\n    )\n  }\n\n  useEffect(() => {\n    if (!notion) {\n      return\n    }\n\n    const subscription = notion.onAuthStateChanged().subscribe((user) => {\n      if (user) {\n        setUser(user)\n      }\n      setLoading(false)\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [notion])\n\n  function resetState() {\n    setNotion(null)\n    setUser(null)\n    setDeviceId('')\n  }\n\n  useEffect(() => {\n    if (!user && notion && email && password) {\n      login()\n    }\n    async function login() {\n      const auth = await notion.login({ email, password }).catch((error) => {\n        console.log(error)\n      })\n\n      if (auth) {\n        setUser(auth.user)\n      }\n    }\n  }, [email, notion])\n\n  useEffect(() => {\n    if (user) {\n      if (focus < 0.2) {\n        setBgColor('red')\n        Vibration.vibrate(10000)\n        if (notifications) {\n          new Notification('Stay focused!')\n        }\n      } else {\n        setBgColor('#fff')\n        Vibration.cancel()\n      }\n    }\n  }, [focus, user])\n\n  const notificationInit = () => {\n    // Let's check if the browser supports notifications\n    if ('Notification' in window) {\n      // Let's check whether notification permissions have already been granted\n      if (Notification.permission === 'granted') {\n        // If it's okay let's create a notification\n        setNotifications(true)\n      }\n\n      // Otherwise, we need to ask the user for permission\n      else if (Notification.permission !== 'denied') {\n        Notification.requestPermission().then(function (permission) {\n          // If the user accepts, let's create a notification\n          if (permission === 'granted') {\n            setNotifications(true)\n          } else {\n            setNotifications(false)\n          }\n        })\n      }\n    }\n\n    // At last, if the user has denied notifications, and you\n    // want to be respectful there is no need to bother them any more.\n  }\n\n  const logout = () => {\n    notion.logout()\n    setUser(null)\n    clearInterval(intervalId)\n    setFocus(0)\n    setBgColor('#fff')\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: bgColor,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    heading: {\n      fontSize: 24,\n      marginBottom: 16,\n    },\n    input: {\n      height: 40,\n      width: '100%',\n      maxWidth: 260,\n      borderColor: 'gray',\n      borderWidth: 1,\n      marginVertical: 8,\n      paddingHorizontal: 4,\n    },\n    focusText: {\n      fontSize: 18,\n      marginBottom: 8,\n    },\n  })\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <Text>Loading</Text>\n      </View>\n    )\n  }\n\n  return (\n    <View style={styles.container}>\n      {user ? (\n        <>\n          <Text style={styles.heading}>Notion Linked!</Text>\n          <Text style={styles.focusText}>{`Focus: ${(focus * 100).toFixed(\n            0\n          )}%`}</Text>\n          <Button title=\"Logout\" onPress={() => logout()} />\n        </>\n      ) : (\n        <>\n          <Text style={styles.heading}>Link your Notion</Text>\n          <TextInput\n            style={styles.input}\n            onChangeText={(text) => setDeviceId(text)}\n            value={deviceId}\n            placeholder=\"Device ID\"\n          />\n          <TextInput\n            style={styles.input}\n            onChangeText={(text) => setEmail(text)}\n            value={email}\n            placeholder=\"Email\"\n          />\n          <TextInput\n            style={styles.input}\n            onChangeText={(text) => setPassword(text)}\n            value={password}\n            placeholder=\"Password\"\n            textContentType=\"password\"\n            autoCompleteType=\"password\"\n            secureTextEntry={true}\n          />\n          <Button\n            title=\"Submit\"\n            onPress={() => init()}\n            accessibilityLabel=\"Submit\"\n          />\n        </>\n      )}\n    </View>\n  )\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/stay-focused/expo-service-worker.js', { scope: '/stay-focused/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 96;"],"sourceRoot":""}